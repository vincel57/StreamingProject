@model IEnumerable<StreamingAPI.Models.Anime>

@{
    ViewData["Title"] = "Index";
}

<style>
    body {
        background-image: url('https://img.freepik.com/photos-gratuite/paysage-urbain-cyberpunk_23-2150712616.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        color: #fff; /* Couleur du texte */
    }

    .table {
        background-color: rgba(0, 0, 0, 0.5); /* Couleur de fond de la table avec opacité */
        color: #fff; /* Couleur du texte dans la table */
    }
     
        .table th, .table td {
            border-color: #fff; /* Couleur des bordures de la table */
        }

    .btn {
        background-color: #ff5733; /* Couleur de fond des boutons */
        border-color: #ff5733; /* Couleur de la bordure des boutons */
        color: #fff; /* Couleur du texte des boutons */
    }

        .btn:hover {
            background-color: #ff9145; /* Couleur de fond des boutons au survol */
            border-color: #ff9145; /* Couleur de la bordure des boutons au survol */
        }

    .nav-link {
        color: #fff; /* Couleur du texte des liens de navigation */
    }

        .nav-link:hover {
            color: #ff5733; /* Couleur du texte des liens de navigation au survol */
        }

    /* Autres styles CSS personnalisés peuvent être ajoutés ici */
</style>

<h1>Index</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Create New Anime</a>
</p>

<p>
    <a asp-action="Create" class="btn btn-primary">Create New Category</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                Image
            </th>
            <th>
                Video Link
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody id="animeTable">
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    <img id="image_@item.Id" src="@item.Link_image" alt="Image" width="100" height="100">
                </td>
                <td>
                    <a href="@item.Link_video">Watch Video</a>
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-secondary">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-secondary">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        // Fonction pour mettre à jour l'image en temps réel
        function updateAnimeImage(id, linkImage) {
            document.getElementById("image_" + id).src = linkImage;
        }

        // Exemple de mise à jour des images des animes
        setInterval(function () {
            // Faites une requête AJAX pour obtenir les images des animes mises à jour depuis le serveur
            // Supposons que vous récupériez les données sous forme de JSON

            // Exemple de données JSON
            var updatedAnimeImages = [
                { id: 1, linkImage: "nouvelle_image.jpg" },
                { id: 2, linkImage: "autre_image.jpg" }
                // Ajoutez autant d'objets anime que nécessaire
            ];

            // Mettez à jour les images des animes dans le tableau en parcourant les données JSON
            updatedAnimeImages.forEach(function (anime) {
                updateAnimeImage(anime.id, anime.linkImage);
            });
        }, 5000); // Mettez à jour toutes les 5 secondes (5000 millisecondes)
    </script>
}
